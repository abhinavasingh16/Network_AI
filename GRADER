
                                     GRADER

Name of student running submit: Abhinava Singh 
Login of student running submit: cs61b-kx 

Second team member's name:
Second team member's login:

Third team member's name (if any):
Third team member's login:

IMPORTANT:  Once you've submitted Project 2 once, the same team member should
submit always.  If a different teammate must submit, inform cs61b@cory.eecs of
all the details.  Include a complete list of team members, and let us know
which submission you want graded.

If you've submitted your project once, or even written a substantial amount of
code together, you may not change partners without the permission of the
instructor.
===============================================================================
Does your program compile without errors? Yes


Have you tested your program on the 61B lab machines? Yes 


Did you successfully implement game tree search?  Did you successfully
implement alpha-beta pruning?  Are there any limitations on it?  What is the
default number of search levels set by the one-parameter MachinePlayer
constructor (or is it a variable-depth search)? ---: Yes, yes, and yes. The limitations are the search depth and the evaluation function. To be a perfect AI you need to either be able to go down the tree all the way or have an amazing evaluation function. Obviously for a game like the this the former fails so we make do with a search depth of 4. 


Describe your board evaluation function in some detail.

     * This is the evaluation function of a input Board. The way it works is the following: 
     * 
     * It checks to see if there are pieces at the goal lines. It assigns a point for being at each respective goal-line. 
     * It subtracts points if your opponent has pieces at their goal line. 
     * 
     * Then based on the difference between your connections and your opponents connections it adds to BoardScore. So 
     * if your opponent is winning the score is negative and if your opponent is loosing then the boardScore is
     * positive. 
     * 
     * It returns the boardScore. 


Does your MachinePlayer use any special method of choosing the first few moves?

  It picks cell 10 as the first move all the time and prioritizes goal lines first before anything else. 


Is there anything else the graders should know to help them read your project?
  
  Nothing really I tried to make it readable. 



Describe the classes, modules, and interfaces you designed before and while you
implemented the project.  Your description should include:
  -  A list of the classes your program uses.
  -  A list of each of the "modules" used in or by MachinePlayer, similar to
     the list in the "Teamwork" section of the README (but hopefully more
     detailed).  (If you're using a list class, that should probably count as
     a separate module.)
  -  For each module, list the class(es) the module is implemented in.
  -  For each module, say which of your team members implemented it.
  -  For each module, describe its interface--specifically, the prototype and
     behavior of each method that is available for external callers (outside
     the module) to call.  Don't include methods that are only meant to be
     called from within the module.

     For each method, provide (1) a method prototype and (2) a complete,
     unambiguous description of the behavior of the method/module.  This
     description should also appear before the method in your code's comments.

You will probably need to change some of your design decisions as you go; be
sure to modify this file to reflect these changes before you submit your
project.  Your design of classes and interfaces will be worth 10% of your
grade.

TEAMWORK - I did it. 

CLASSES 
____________


PACKAGE: PLAYER 
  x Board Class - This class mantains an internal network of the board. It mantains networks, and ensures legal moves are being played. It also has some evaluation helper methods which determine what winningmoves and loosingmoves are and puts them in a DList. 

  x MoveWrapper - This is a wrapper for the move object. It holds an object and also holds its score during miniMax. 

  x BoardWrapper - This does most of the processing for the board. It internally mantains the goal lines and where certain cells are located. This makes sure that a malicious person cannot mess with the internal state of the goal lines and the boards cells. 

  x MachinePlayer - The standard machineplayer object. It stores the evaluation function and does minimax and choose move. This is what the application calls on. 

  x Move - It stores moves and positions. 

  x Player interface 


PACKAGE: list 
  x List Abstract Class - It is a general List based abstract data type.

  x ListNode Abstract Class - It is a listNode based abstract data type. 

  x DList - This has sentinels and implements the List ADT. 

  x DListNode - This is a standard DListNode and implmenets the ListNode ADT. 

  x InvalidNode - Exception object. Throwable. 


Module 1: General Data Structures to be used. 

Start with a BoardWrapper which mantains the internal state of the board. Also establish The List, ListNode, DList, and DListNode, and InvalidNode data type. 


/* MoveWrapper.java */

package player;


public class MoveWrapper {

    private Move move;
    private double score;
    
    /**
     * The is a moveWrapper constructor with 0 args. It sets move = null and the score = 0; 
     * 
     * 
     **/
    protected MoveWrapper() {
    }

    /**
     * This is the 1 args movewrapper constructor. It inputs the score and sets the move = null. 
     * 
     * @param score
     */
    protected MoveWrapper(double score) {
    }

    /**
     * THis is the two arg MoveWrapper constructor. It sets the move and the score. 
     * 
     * @param move
     * @param score
     */
    protected MoveWrapper(Move move, double score) {
    }
    
    /**
     * Setter for the score field. 
     * 
     * @param score
     */
    protected void setScore(double score) {
    }

    /**
     * setter for the move field. 
     * 
     * @param move
     */
    protected void setMove(Move move) {
    }
    
    /**
     * getter for the score field. 
     * 
     * @return
     */
    protected double getScore() {
    }
    
    /**
     * getter for the move field. 
     * 
     * @return
     */
    protected Move getMove() {
    }
}

/* DListNode.java */

package list;

/**
 *  A DListNode is a mutable node in a DList (doubly-linked list).
 **/

public class DListNode extends ListNode {

  /**
   *  (inherited)  item references the item stored in the current node.
   *  (inherited)  myList references the List that contains this node.
   *  prev references the previous node in the DList.
   *  next references the next node in the DList.
   *
   *  DO NOT CHANGE THE FOLLOWING FIELD DECLARATIONS.
   **/

    protected DListNode prev;
    protected DListNode next;
    protected int xCol;
    protected int yRow;
    protected int direction;
    
  /**
   *  DListNode() constructor.
   *  @param i the item to store in the node.
   *  @param l the list this node is in.
   *  @param p the node previous to this node.
   *  @param n the node following this node.
   */
    DListNode(Object i, DList l, DListNode p, DListNode n) {
    }
    
  /**
  * getter for yRow(). 
  **/
   public int yRow() {
   }
    
   /**
   *  getter for xCol(). 
   **/
    public int xCol() {
    }
    
    /**
    *   YRow sets the row for y. 
    **/
    public void YRow(int y) {
    }
    
    /**
    * setter for direc
    **/
    public void direc(int d) {
    }

    /**
    * setter for xCol() which inputs x. 
    **/
    public void xCol(int x) {
    }
    
    /**
    * getter for the direc field. 
    **/
    public int direc() {
    }
    
  

  /**
   *  isValidNode returns true if this node is valid; false otherwise.
   *  An invalid node is represented by a `myList' field with the value null.
   *  Sentinel nodes are invalid, and nodes that don't belong to a list are
   *  also invalid.
   *
   *  @return true if this node is valid; false otherwise.
   *
   *  Performance:  runs in O(1) time.
   */
  public boolean isValidNode() {
  }

  /**
   *  next() returns the node following this node.  If this node is invalid,
   *  throws an exception.
   *
   *  @return the node following this node.
   *  @exception InvalidNodeException if this node is not valid.
   *
   *  Performance:  runs in O(1) time.
   */
  public ListNode next() throws InvalidNodeException {
  }

  /**
   *  prev() returns the node preceding this node.  If this node is invalid,
   *  throws an exception.
   *
   *  @param node the node whose predecessor is sought.
   *  @return the node preceding this node.
   *  @exception InvalidNodeException if this node is not valid.
   *
   *  Performance:  runs in O(1) time.
   */
  public ListNode prev() throws InvalidNodeException {
  }

  /**
   *  insertAfter() inserts an item immediately following this node.  If this
   *  node is invalid, throws an exception.
   *
   *  @param item the item to be inserted.
   *  @exception InvalidNodeException if this node is not valid.
   *
   *  Performance:  runs in O(1) time.
   */
  public void insertAfter(Object item) throws InvalidNodeException {
  }

  /**
   *  insertBefore() inserts an item immediately preceding this node.  If this
   *  node is invalid, throws an exception.
   *
   *  @param item the item to be inserted.
   *  @exception InvalidNodeException if this node is not valid.
   *
   *  Performance:  runs in O(1) time.
   */
  public void insertBefore(Object item) throws InvalidNodeException {
  }

  /**
   *  remove() removes this node from its DList.  If this node is invalid,
   *  throws an exception.
   *
   *  @exception InvalidNodeException if this node is not valid.
   *
   *  Performance:  runs in O(1) time.
   */
  public void remove() throws InvalidNodeException {
  }

}

/* DList.java */

package list;

/**
 *  A DList is a mutable doubly-linked list ADT.  Its implementation is
 *  circularly-linked and employs a sentinel node at the head of the list.
 *
 *  DO NOT CHANGE ANY METHOD PROTOTYPES IN THIS FILE.
 **/

public class DList extends List {

  /**
   *  (inherited)  size is the number of items in the list.
   *  head references the sentinel node.
   *  Note that the sentinel node does not store an item, and is not included
   *  in the count stored by the "size" field.
   *
   *  DO NOT CHANGE THE FOLLOWING FIELD DECLARATION.
   **/

  private DListNode head;

  /* DList invariants:
   *  1)  head != null.
   *  2)  For every DListNode x in a DList, x.next != null.
   *  3)  For every DListNode x in a DList, x.prev != null.
   *  4)  For every DListNode x in a DList, if x.next == y, then y.prev == x.
   *  5)  For every DListNode x in a DList, if x.prev == y, then y.next == x.
   *  6)  For every DList l, l.head.myList = null.  (Note that l.head is the
   *      sentinel.)
   *  7)  For every DListNode x in a DList l EXCEPT l.head (the sentinel),
   *      x.myList = l.
   *  8)  size is the number of DListNodes, NOT COUNTING the sentinel,
   *      that can be accessed from the sentinel (head) by a sequence of
   *      "next" references.
   **/

  /**
   *  newNode() calls the DListNode constructor.  Use this method to allocate
   *  new DListNodes rather than calling the DListNode constructor directly.
   *  That way, only this method need be overridden if a subclass of DList
   *  wants to use a different kind of node.
   *
   *  @param item the item to store in the node.
   *  @param list the list that owns this node.  (null for sentinels.)
   *  @param prev the node previous to this node.
   *  @param next the node following this node.
   **/
  protected DListNode newNode(Object item, DList list,DListNode prev, DListNode next) {
        return new DListNode(item, list, prev, next); 
  }

  /**
   *  DList() constructs for an empty DList.
   **/
  public DList() {
      size = 0;
      head = newNode(null, null, null, null);
      head.next = head;
      head.prev = head;
  }

  /**
   *  insertFront() inserts an item at the front of this DList.
   *
   *  @param item is the item to be inserted.
   *
   *  Performance:  runs in O(1) time.
   **/
  public void insertFront(Object item) {
      DListNode tempNode = newNode(item, this, head, head.next);
      head.next.prev = tempNode;
      head.next = tempNode;
      size++;
  }

  /**
   *  insertBack() inserts an item at the back of this DList.
   *
   *  @param item is the item to be inserted.
   *
   *  Performance:  runs in O(1) time.
   **/
  public void insertBack(Object item) {
      DListNode tempNode = newNode(item, this, head.prev, head);
      head.prev.next = tempNode;
      head.prev = tempNode;
      size++;
  }

  /**
   *  front() returns the node at the front of this DList.  If the DList is
   *  empty, return an "invalid" node--a node with the property that any
   *  attempt to use it will cause an exception.  (The sentinel is "invalid".)
   *
   *  DO NOT CHANGE THIS METHOD.
   *
   *  @return a ListNode at the front of this DList.
   *
   *  Performance:  runs in O(1) time.
   */
  public ListNode front() {
      return head.next;
  }

  /**
   *  back() returns the node at the back of this DList.  If the DList is
   *  empty, return an "invalid" node--a node with the property that any
   *  attempt to use it will cause an exception.  (The sentinel is "invalid".)
   *
   *  DO NOT CHANGE THIS METHOD.
   *
   *  @return a ListNode at the back of this DList.
   *
   *  Performance:  runs in O(1) time.
   */
  public ListNode back() {
      return head.prev;
  }

  /**
   *  toString() returns a String representation of this DList.
   *
   *  DO NOT CHANGE THIS METHOD.
   *
   *  @return a String representation of this DList.
   *
   *  Performance:  runs in O(n) time, where n is the length of the list.
   */
  public String toString() {
    String result = "[  ";
    DListNode current = head.next;
    while (current != head) {
      result = result + "(" + current.xCol + ", " + current.yRow + ")  ";
      current = current.next;
    }
    return result + "]";
  }
}

/* ListNode.java */

package list;

/**
 *  A ListNode is a mutable node in a list.  No implementation is provided.
 *
 *  DO NOT CHANGE THIS FILE.
 **/

public abstract class ListNode {

  /**
   *  item references the item stored in the current node.
   *  myList references the List that contains this node.
   *
   *  DO NOT CHANGE THE FOLLOWING FIELD DECLARATIONS.
   */

  protected Object item;
  protected List myList;

  /**
   *  isValidNode returns true if this node is valid; false otherwise.
   *  By default, an invalid node is one that doesn't belong to a list (myList
   *  is null), but subclasses can override this definition.
   *
   *  @return true if this node is valid; false otherwise.
   *
   *  Performance:  runs in O(1) time.
   */
  public boolean isValidNode() {
    return myList != null;
  }

  /**
   *  item() returns this node's item.  If this node is invalid,
   *  throws an exception.
   *
   *  @return the item stored in this node.
   *
   *  Performance:  runs in O(1) time.
   */
  public Object item() throws InvalidNodeException {
    if (!isValidNode()) {
      throw new InvalidNodeException();
    }
    return item;
  }

  /**
   *  setItem() sets this node's item to "item".  If this node is invalid,
   *  throws an exception.
   *
   *  Performance:  runs in O(1) time.
   */
  public void setItem(Object item) throws InvalidNodeException {
    if (!isValidNode()) {
      throw new InvalidNodeException();
    }
    this.item = item;
  }

  /**
   *  next() returns the node following this node.  If this node is invalid,
   *  throws an exception.
   *
   *  @return the node following this node.
   *  @exception InvalidNodeException if this node is not valid.
   */
  public abstract ListNode next() throws InvalidNodeException;

  /**
   *  prev() returns the node preceding this node.  If this node is invalid,
   *  throws an exception.
   *
   *  @param node the node whose predecessor is sought.
   *  @return the node preceding this node.
   *  @exception InvalidNodeException if this node is not valid.
   */
  public abstract ListNode prev() throws InvalidNodeException;

  /**
   *  insertAfter() inserts an item immediately following this node.  If this
   *  node is invalid, throws an exception.
   *
   *  @param item the item to be inserted.
   *  @exception InvalidNodeException if this node is not valid.
   */
  public abstract void insertAfter(Object item) throws InvalidNodeException;

  /**
   *  insertBefore() inserts an item immediately preceding this node.  If this
   *  node is invalid, throws an exception.
   *
   *  @param item the item to be inserted.
   *  @exception InvalidNodeException if this node is not valid.
   */
  public abstract void insertBefore(Object item) throws InvalidNodeException;

  /**
   *  remove() removes this node from its List.  If this node is invalid,
   *  throws an exception.
   *
   *  @exception InvalidNodeException if this node is not valid.
   */
  public abstract void remove() throws InvalidNodeException;

}

/* List.java */

package list;

/**
 *  A List is a mutable list ADT.  No implementation is provided.
 *
 *  DO NOT CHANGE THIS FILE.
 **/

public abstract class List {

  /**
   *  size is the number of items in the list.
   **/

  protected int size;

  /**
   *  isEmpty() returns true if this List is empty, false otherwise.
   *
   *  @return true if this List is empty, false otherwise. 
   *
   *  Performance:  runs in O(1) time.
   **/
  public boolean isEmpty() {
    return size == 0;
  }

  /** 
   *  length() returns the length of this List. 
   *
   *  @return the length of this List.
   *
   *  Performance:  runs in O(1) time.
   **/
  public int length() {
    return size;
  }

  /**
   *  insertFront() inserts an item at the front of this List.
   *
   *  @param item is the item to be inserted.
   **/
  public abstract void insertFront(Object item);

  /**
   *  insertBack() inserts an item at the back of this List.
   *
   *  @param item is the item to be inserted.
   **/
  public abstract void insertBack(Object item);

  /**
   *  front() returns the node at the front of this List.  If the List is
   *  empty, return an "invalid" node--a node with the property that any
   *  attempt to use it will cause an exception.
   *
   *  @return a ListNode at the front of this List.
   */
  public abstract ListNode front();

  /**
   *  back() returns the node at the back of this List.  If the List is
   *  empty, return an "invalid" node--a node with the property that any
   *  attempt to use it will cause an exception.
   *
   *  @return a ListNode at the back of this List.
   */
  public abstract ListNode back();

  /**
   *  toString() returns a String representation of this List.
   *
   *  @return a String representation of this List.
   */
  public abstract String toString();
}


Module 2/3: (2)Represent the board object and implement add and step moves (3)figure out how to internally establish networks and figure out how to chain them togeher to win the game. The way I did this was by traversing the board and adding to DLists and chaining together the valid linkages until I got to 6. This is all done in Board.java. 

/* Board.java */

package player; 
import list.*;

public class Board {

    /**
     * These variables ensures which spots of the board are open and which aren't. It also establishes an iterator and 
     * a list of items that have been visited during search. 
     */
    private static boolean isTLOpen = true;
    private static boolean isLOpen = true;
    private static boolean isTOpen = true;
    private static boolean isTROpen = true;
    private static boolean isROpen = true;
    private static boolean isBROpen = true;
    private boolean iterator = true;
    private static boolean isBOpen = true;
    private static boolean isBLOpen = true;
    private  int[] hasVisited = new int[6];

    /**
     * These are general game variables. Not to be construed with the others. 
     */
    private static final int EMPTY = -1;
    protected static final int WHITE = 1;
    protected static final int BLACK = 0;
    private static final int NORMAL = 2;
    

    /**
     *  These are static variables used for determining which direction the linkage occurred during the linking process. 
     **/
    private static final int T = 1;
    private static final int TL = 2;
    private static final int R = 3;
    private static final int TR = 4;
    private static final int L = 5;
    private static final int BR = 6;
    private static final int BL = 7;
    private static final int B = 8;
    
    /**
     * This is a general Board() constructor which calls upon the the BoardWrapper. 
     * The board wrapper function makes sure that an proper board is created for the game. 
     */
    private BoardWrapper[][] board = new BoardWrapper[8][8];
    
    protected Board(){
    }

    
        
    /**
     * Undo Moves does literally what it says. It checks to see if there is a different color at 
     * that space you move into and move from. It then undo's the move and replaces the color. 
     * 
     * @param color
     * @param move
     */
     protected void undoMove(int color, Move move) {
     }
    
     /**
      * This function performs the given move for you. If the move is a Step move then it steps from one position into another. 
      * If the move is a add move then it just adds. Finally, if its quit then it does nothing. 
      * 
      * @param color
      * @param move
      */
    protected void doMove(int color, Move move) {
    }
    
    
    /**
     * graph Traverse traverses the board and checks to see if you have pieces that surround position x and y with the same color. 
     * This is used to check for clustering and enforce it. It returns the number of chips around a cell. 
     * 
     * @param x
     * @param y
     * @param c
     * @return
     */
    private int graphTraverse(int x, int y, int c){
    }

    /**
     * isValidMove is basically the referee. It ensures that specific moves are allowed. Enforces clustering. 
     * Checks to see if you have pieces in closed objects. It also checks to see if you are stepping correctly.
     * It returns true f it is indeed legal and false otherwise.  
     * 
     * @param x
     * @param y
     * @param color
     * @return
     */
    protected boolean isValidMove(int x, int y, int color){
    }
    
   

    /**
     * This checks to see if a x and y value are in a 
     * 2D array called storage. This ensres that you arent calling
     * mantainNetworks twice. 
     * 
     * @param x
     * @param y
     * @param storage
     * @return
     */
    private static boolean inStorage(int x, int y, int[][] storage){
    }


    /**
     * This is a very general searcher method. It starts with a x and y position. 
     * It counts up, left, right, down, and in all other cardinal directions. 
     * The moment it hits a chip of the same color it forms a linkage. This returns a DList of the 
     * linkages. 
     * 
     * @param yValue
     * @param xValue
     * @return
     */
    protected DList checkDirection(int yValue,int xValue) {
    }

    private void setValsToTrue(){
    }
    
    /**
     *finalizeInsert() just makes the node that represents the linkage. 
     * 
     * @param potX
     * @param potY
     * @param color
     * @param returnList
     * @param dirn
     * @return
     */
    private DList finalizeInsert(int potX, int potY, int color, DList returnList, int dirn) {   
    }

    /**
     * Helper method that makes sure to check if x1,y1 and x2,y2 
     * are diagonal to each other. Returns true if they are and 
     * false if they aren't. 
     * 
     * @param x1
     * @param y1
     * @param x2
     * @param y2
     * @return
     */
    private static boolean isOrthogonal(int x1, int y1, int x2, int y2){
    }
    
    /**
     * Private method made for debugging. Please disreagaurd. 
     * 
     * @param x1
     * @param y1
     * @param x2
     * @param y2
     * @return
     */
    private static boolean isAligned(int x1, int y1, int x2, int y2){
    }


    /**
     * Checks to see if you have a network. Returns true if you do and false otherwise. 
     * 
     * @return
     */
    protected boolean isNetwork() {
    }
    
    /**
     * This is the first of many helper methods for isNetwork(). colorNetwork checks to see if a specific color has a network. 
     * 
     * @param specColor
     * @return
     */
    protected boolean colorNetwork(int specColor) {
    }
    

    /**
     * networkSearch() does a pseudo DFS to check to see if you have 6 linkages for a color. 
     * It retains a visited array to ensure you aren't entring into a unnecessary cycle. 
     * Probably should have used disjoint sets now that I think about it.  
     * It finds potential candidates and then checks to see if they create a network. 
     * 
     * @param color
     * @param prevPieces
     * @param loop
     * @return
     */
    private boolean networkSearch(int color, DList prevPieces, int loop) {
    }

    /**
     * checkAndFilter takes a potential x and y candidate and tries to DFS it to determine if it reaches the end with a 6 linked chain. 
     * It chains together linkages basically. It eturns true if you have the necessary amount of linkages for a network, and false otherwise. 
     * 
     * @param toBeFiltered
     * @param yCandidate
     * @param xCandidate
     * @param fromWhere
     * @return
     */
    private boolean checkAndFilter(DList toBeFiltered, int yCandidate, int xCandidate, int fromWhere) {
    }
    
    /**
     * This method call helps check and filter chain together networks and returns true if it makes a network after chaining 
     * the linkages together. It mantains a loop in order to mantain how many searches are done. 
     * 
     * @param prevPieces
     * @param linkages
     * @param loop
     * @return
     */
    private boolean finalChecker(DList prevPieces, DList linkages, int loop) {
    }
                        
    
    /**
     * This is what the many years spent playing mortal kombat prepared you for. 
     * This method traverses the board and checks to see if there is a winningBoard amongst the color. 
     * This is to be used in the machine player to determine which move to do. If it sees a move that gives it a win then it 
     * chooses that move. 
     * 
     * @param color
     * @return
     */
    protected DList finishHim(int color) {
    }

    /**
     * badMove controls how you stepmove in the game. If your step move has the potential to go totally badly. 
     * Then it increments a counter as a possible bad move and returns it. 
     * 
     * 
     * @param color
     * @return
     */
    protected int badMoves(int color) {
    }
    
    /**
     * This is the opposite of finishHim. 
     * It lets you know how many moves exist for your opponent to win so you can minimize them during evaluation.  
     * 
     * 
     * @param color
     * @return
     */
    protected int opponentPosition(int color) {
    }
    
    /**
     * This is a general toString() method for your board. Use it for debugging. 
     * It returns a string represntation of your gameBoard. 
     */
    public String toString(){
    }
    
    public static String gameBoardToString(int[][] board){
    }
    
    
    /**
     * This tells you what color exists at a specific part of the board. 
     * 
     * @param x
     * @param y
     * @return
     **/
    protected int findColor(int x, int y) {
    }
    
}

Module (4)/(5) - (4)Write an evaluator method and (5)then implement choosemove and alpha beta pruning to pick the best move. This is done in the Machine PLayer Class. 

/* MachinePlayer.java */

package player;
import list.*;

/**
 *  An implementation of an automatic Network player.
 *  
 */
public class MachinePlayer extends Player {
    
    private int chipsOnTable = 20;
    private int color;
    private int searchDepth;
    private Board board;

    public static final int SEARCHDEPTH = 4;
    public static final int BLACK = 0;
    public static final int WHITE = 1;
    public static final int BLOCKED = 3;
    public static final int EMPTY = 2;
    
    /**
     * This is the machinePlayer() constructor. It Sets the color of the player. 
     * It also searches the depth of which minimax will search. 
     * @param color1
     */
    public MachinePlayer(int color1) {
    }
    
    /**
     * This is a 2 argument constructor for the machine player class. It sets the color equal to color and
     * sets the search Depth. is also creates the gameBoard().  
     * 
     * @param color
     * @param searchDepth
     */
    public MachinePlayer(int color1, int searchDepth) {
    }

    /**
     * When the opponent moves, it records the opponent move in the gameBoard so you can counter it. 
     * Allows you to evaluate the board effectively. it returns true if their move is legal. False otherwise. 
     * 
     */
    public boolean opponentMove(Move m) {
    }
    


    /**
     * This is the chooseMove() method which selects a move for the machine player. 
     * It utilizes the minimax and the evaluation function to pick the best moves. 
     */
    public Move chooseMove() {
    }
    
    
    /**
     * this is forceMove() basically it does the move and returns true 
     * if valid and returns false otherwise given an input Move to be forced. 
     * 
     */
    public boolean forceMove(Move move) {
    }
    
    /**
     * This is the minimax algorithm as shown by Professor Shewchuk in lecture. 
     * It implements alpha beta pruning to figure out the best move to be chosen
     * by the machine player. 
     * 
     * @param color
     * @param alpha
     * @param beta
     * @param sdepth
     * @return
     */
    private MoveWrapper miniMaxAlgorithm(int color, double alpha, double beta, int sdepth) {
    }
    
    /**
     * This is the evaluation function of a input Board. The way it works is the following: 
     * 
     * It checks to see if there are pieces at the goal lines. It assigns a point for being at each respective goal-line. 
     * It subtracts points if your opponent has pieces at their goal line. 
     * 
     * Then based on the difference between your connections and your opponents connections it adds to BoardScore. So 
     * if your opponent is winning the score is negative and if your opponent is loosing then the boardScore is
     * positive. 
     * 
     * It returns the boardScore. 
     * 
     * 
     * @param b
     * @return
     */
    private float evaluateBoard(Board b) {
    }
 
    /**
     * Determines what your opponent's color is. It inputs an int color and outputs your opponents color. 
     * 
     * @param color
     * @return
     */
    private static int oppColor(int color) {
    }

}        











